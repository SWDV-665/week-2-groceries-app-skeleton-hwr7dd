{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/seaha/Desktop/Groceries/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/seaha/Desktop/Groceries/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/seaha/Desktop/Groceries/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { Plugins } from '@capacitor/core';\nimport { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';\nimport { notAvailable } from '../util/models';\nexport var availableFeatures = {\n  isScreenReaderAvailable: isFeatureAvailable('Accessibility', 'isScreenReaderAvailable'),\n  speak: isFeatureAvailable('Accessibility', 'speak')\n};\nexport function useIsScreenReaderEnabled() {\n  var Accessibility = Plugins.Accessibility;\n\n  if (!availableFeatures.isScreenReaderAvailable) {\n    return notAvailable;\n  }\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      isScreenReaderEnabled = _useState2[0],\n      setIsScreenReaderAvailable = _useState2[1];\n\n  useEffect(function () {\n    function checkScreenReader() {\n      return _checkScreenReader.apply(this, arguments);\n    }\n\n    function _checkScreenReader() {\n      _checkScreenReader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var isEnabled;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Accessibility.isScreenReaderEnabled();\n\n              case 2:\n                isEnabled = _context.sent;\n                setIsScreenReaderAvailable(isEnabled.value);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _checkScreenReader.apply(this, arguments);\n    }\n\n    if (availableFeatures.isScreenReaderAvailable) {\n      checkScreenReader();\n    }\n  }, [Accessibility, setIsScreenReaderAvailable]);\n  return {\n    isScreenReaderEnabled: isScreenReaderEnabled,\n    isAvailable: true\n  };\n}\nexport function useSpeak() {\n  var Accessibility = Plugins.Accessibility;\n\n  if (!availableFeatures.speak) {\n    return Object.assign({\n      speak: featureNotAvailableError\n    }, notAvailable);\n  }\n\n  return {\n    speak: Accessibility.speak,\n    isAvailable: true\n  };\n}","map":{"version":3,"sources":["../../src/accessibility/useAccessibility.ts"],"names":[],"mappings":";;;AAAA,SAAS,QAAT,EAAmB,SAAnB,QAAoC,OAApC;AACA,SAAS,OAAT,QAAwB,iBAAxB;AACA,SAAS,kBAAT,EAA6B,wBAA7B,QAA6D,uBAA7D;AACA,SAA0B,YAA1B,QAA8C,gBAA9C;AAKA,OAAO,IAAM,iBAAiB,GAAG;AAC/B,EAAA,uBAAuB,EAAE,kBAAkB,CAAC,eAAD,EAAkB,yBAAlB,CADZ;AAE/B,EAAA,KAAK,EAAE,kBAAkB,CAAC,eAAD,EAAkB,OAAlB;AAFM,CAA1B;AAKP,OAAM,SAAU,wBAAV,GAAkC;AACtC,MAAQ,aAAR,GAA0B,OAA1B,CAAQ,aAAR;;AAEA,MAAG,CAAC,iBAAiB,CAAC,uBAAtB,EAA+C;AAC7C,WAAO,YAAP;AACD;;AAED,kBAA4D,QAAQ,EAApE;AAAA;AAAA,MAAO,qBAAP;AAAA,MAA8B,0BAA9B;;AAEA,EAAA,SAAS,CAAC,YAAK;AAAA,aACE,iBADF;AAAA;AAAA;;AAAA;AAAA,oFACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC0B,aAAa,CAAC,qBAAd,EAD1B;;AAAA;AACQ,gBAAA,SADR;AAEE,gBAAA,0BAA0B,CAAC,SAAS,CAAC,KAAX,CAA1B;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADa;AAAA;AAAA;;AAKb,QAAI,iBAAiB,CAAC,uBAAtB,EAA+C;AAC/C,MAAA,iBAAiB;AAChB;AACF,GARQ,EAQN,CAAC,aAAD,EAAgB,0BAAhB,CARM,CAAT;AAUA,SAAO;AACL,IAAA,qBAAqB,EAArB,qBADK;AAEL,IAAA,WAAW,EAAE;AAFR,GAAP;AAID;AAED,OAAM,SAAU,QAAV,GAAkB;AACtB,MAAQ,aAAR,GAA0B,OAA1B,CAAQ,aAAR;;AACA,MAAG,CAAC,iBAAiB,CAAC,KAAtB,EAA6B;AAC3B,WAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,KAAK,EAAE;AADT,KAAA,EAEK,YAFL,CAAA;AAID;;AAED,SAAO;AACL,IAAA,KAAK,EAAE,aAAa,CAAC,KADhB;AAEL,IAAA,WAAW,EAAE;AAFR,GAAP;AAID","sourceRoot":"","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Plugins } from '@capacitor/core';\nimport { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';\nimport { notAvailable } from '../util/models';\nexport const availableFeatures = {\n    isScreenReaderAvailable: isFeatureAvailable('Accessibility', 'isScreenReaderAvailable'),\n    speak: isFeatureAvailable('Accessibility', 'speak')\n};\nexport function useIsScreenReaderEnabled() {\n    const { Accessibility } = Plugins;\n    if (!availableFeatures.isScreenReaderAvailable) {\n        return notAvailable;\n    }\n    const [isScreenReaderEnabled, setIsScreenReaderAvailable] = useState();\n    useEffect(() => {\n        async function checkScreenReader() {\n            const isEnabled = await Accessibility.isScreenReaderEnabled();\n            setIsScreenReaderAvailable(isEnabled.value);\n        }\n        if (availableFeatures.isScreenReaderAvailable) {\n            checkScreenReader();\n        }\n    }, [Accessibility, setIsScreenReaderAvailable]);\n    return {\n        isScreenReaderEnabled,\n        isAvailable: true\n    };\n}\nexport function useSpeak() {\n    const { Accessibility } = Plugins;\n    if (!availableFeatures.speak) {\n        return Object.assign({ speak: featureNotAvailableError }, notAvailable);\n    }\n    return {\n        speak: Accessibility.speak,\n        isAvailable: true\n    };\n}\n//# sourceMappingURL=useAccessibility.js.map"]},"metadata":{},"sourceType":"module"}