{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { Plugins } from '@capacitor/core';\nimport { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';\nimport { notAvailable } from '../util/models';\nexport const availableFeatures = {\n  isScreenReaderAvailable: isFeatureAvailable('Accessibility', 'isScreenReaderAvailable'),\n  speak: isFeatureAvailable('Accessibility', 'speak')\n};\nexport function useIsScreenReaderEnabled() {\n  const {\n    Accessibility\n  } = Plugins;\n\n  if (!availableFeatures.isScreenReaderAvailable) {\n    return notAvailable;\n  }\n\n  const [isScreenReaderEnabled, setIsScreenReaderAvailable] = useState();\n  useEffect(() => {\n    async function checkScreenReader() {\n      const isEnabled = await Accessibility.isScreenReaderEnabled();\n      setIsScreenReaderAvailable(isEnabled.value);\n    }\n\n    if (availableFeatures.isScreenReaderAvailable) {\n      checkScreenReader();\n    }\n  }, [Accessibility, setIsScreenReaderAvailable]);\n  return {\n    isScreenReaderEnabled,\n    isAvailable: true\n  };\n}\nexport function useSpeak() {\n  const {\n    Accessibility\n  } = Plugins;\n\n  if (!availableFeatures.speak) {\n    return Object.assign({\n      speak: featureNotAvailableError\n    }, notAvailable);\n  }\n\n  return {\n    speak: Accessibility.speak,\n    isAvailable: true\n  };\n}","map":{"version":3,"sources":["../../src/accessibility/useAccessibility.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,EAAmB,SAAnB,QAAoC,OAApC;AACA,SAAS,OAAT,QAAwB,iBAAxB;AACA,SAAS,kBAAT,EAA6B,wBAA7B,QAA6D,uBAA7D;AACA,SAA0B,YAA1B,QAA8C,gBAA9C;AAKA,OAAO,MAAM,iBAAiB,GAAG;AAC/B,EAAA,uBAAuB,EAAE,kBAAkB,CAAC,eAAD,EAAkB,yBAAlB,CADZ;AAE/B,EAAA,KAAK,EAAE,kBAAkB,CAAC,eAAD,EAAkB,OAAlB;AAFM,CAA1B;AAKP,OAAM,SAAU,wBAAV,GAAkC;AACtC,QAAM;AAAE,IAAA;AAAF,MAAoB,OAA1B;;AAEA,MAAG,CAAC,iBAAiB,CAAC,uBAAtB,EAA+C;AAC7C,WAAO,YAAP;AACD;;AAED,QAAM,CAAC,qBAAD,EAAwB,0BAAxB,IAAsD,QAAQ,EAApE;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,mBAAe,iBAAf,GAAgC;AAC9B,YAAM,SAAS,GAAG,MAAM,aAAa,CAAC,qBAAd,EAAxB;AACA,MAAA,0BAA0B,CAAC,SAAS,CAAC,KAAX,CAA1B;AACD;;AACD,QAAI,iBAAiB,CAAC,uBAAtB,EAA+C;AAC/C,MAAA,iBAAiB;AAChB;AACF,GARQ,EAQN,CAAC,aAAD,EAAgB,0BAAhB,CARM,CAAT;AAUA,SAAO;AACL,IAAA,qBADK;AAEL,IAAA,WAAW,EAAE;AAFR,GAAP;AAID;AAED,OAAM,SAAU,QAAV,GAAkB;AACtB,QAAM;AAAE,IAAA;AAAF,MAAoB,OAA1B;;AACA,MAAG,CAAC,iBAAiB,CAAC,KAAtB,EAA6B;AAC3B,WAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,KAAK,EAAE;AADT,KAAA,EAEK,YAFL,CAAA;AAID;;AAED,SAAO;AACL,IAAA,KAAK,EAAE,aAAa,CAAC,KADhB;AAEL,IAAA,WAAW,EAAE;AAFR,GAAP;AAID","sourceRoot":"","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Plugins } from '@capacitor/core';\r\nimport { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';\r\nimport { notAvailable } from '../util/models';\r\nexport const availableFeatures = {\r\n    isScreenReaderAvailable: isFeatureAvailable('Accessibility', 'isScreenReaderAvailable'),\r\n    speak: isFeatureAvailable('Accessibility', 'speak')\r\n};\r\nexport function useIsScreenReaderEnabled() {\r\n    const { Accessibility } = Plugins;\r\n    if (!availableFeatures.isScreenReaderAvailable) {\r\n        return notAvailable;\r\n    }\r\n    const [isScreenReaderEnabled, setIsScreenReaderAvailable] = useState();\r\n    useEffect(() => {\r\n        async function checkScreenReader() {\r\n            const isEnabled = await Accessibility.isScreenReaderEnabled();\r\n            setIsScreenReaderAvailable(isEnabled.value);\r\n        }\r\n        if (availableFeatures.isScreenReaderAvailable) {\r\n            checkScreenReader();\r\n        }\r\n    }, [Accessibility, setIsScreenReaderAvailable]);\r\n    return {\r\n        isScreenReaderEnabled,\r\n        isAvailable: true\r\n    };\r\n}\r\nexport function useSpeak() {\r\n    const { Accessibility } = Plugins;\r\n    if (!availableFeatures.speak) {\r\n        return Object.assign({ speak: featureNotAvailableError }, notAvailable);\r\n    }\r\n    return {\r\n        speak: Accessibility.speak,\r\n        isAvailable: true\r\n    };\r\n}\r\n//# sourceMappingURL=useAccessibility.js.map"]},"metadata":{},"sourceType":"module"}